class Solution {
	// 不能处理负数
    public void setZeroes(int[][] matrix) {
        int m = matrix.length, n = matrix[0].length;
        if ((m == 0) || (n == 0)) 
            return;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (matrix[i][j] == 0) {
                    for (int k = 0; k < m; k++)
                        matrix[k][j] = -Math.abs(matrix[k][j]);
                    for (int k = 0; k < n; k++)
                        matrix[i][k] = -Math.abs(matrix[i][k]);                   
                }
            }
        }
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (matrix[i][j] < 0) {
                    matrix[i][j] = 0;                   
                }
            }
        }            
    }
	
    public void setZeroes(int[][] matrix) {
        int m = matrix.length, n = matrix[0].length;
        if ((m == 0) || (n == 0)) 
            return;
        boolean row = false, col = false;
        for (int k = 0; k < m; k++) {
            if (matrix[k][0] == 0) 
                col = true;
        }
        for (int k = 0; k < n; k++) {
            if (matrix[0][k] == 0) 
                row = true;
        }                
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (matrix[i][j] == 0) {
                    matrix[i][0] = 0;                 
                    matrix[0][j] = 0;
                }
            }
        }
        for (int i = 1; i < m; i++) {
            for (int j = 1; j < n; j++) {
                if ((matrix[i][0] == 0) || (matrix[0][j] == 0)) {
                    matrix[i][j] = 0;
                }                 
            }
        }
        if (row)
            for (int k = 0; k < n; k++) 
                matrix[0][k] = 0;
        if (col)
            for (int k = 0; k < m; k++) 
                matrix[k][0] = 0;
    }	
}